name: CI

on:
  push:      # run on every push (all branches and tags)
  pull_request:

jobs:
  pre-commit:
    name: pre-commit checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pre-commit-ci/lite-action@v1.1.0

  publish:
    name: Build, Publish & Release
    needs: pre-commit
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (full history & tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Validate tag is valid SemVer (vX.Y.Z) and on origin/main
        id: validate_tag
        run: |
          set -euo pipefail
          TAG_REF="$GITHUB_REF"
          TAG="${TAG_REF#refs/tags/}"
          echo "Found tag: $TAG"

          # Basic SemVer check allowing prerelease/build metadata:
          if [[ ! "$TAG" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)(-[0-9A-Za-z.-]+)?(\+[0-9A-Za-z.-]+)?$ ]]; then
            echo "ERROR: Tag '$TAG' is not a valid SemVer prefixed with 'v' (e.g. v1.2.3)"
            exit 1
          fi

          # Ensure the tag's commit is contained in origin/main
          TAG_SHA=$(git rev-list -n 1 "$TAG")
          # Fetch origin/main to ensure we can check containment
          git fetch origin main:refs/remotes/origin/main
          if ! git branch -r --contains "$TAG_SHA" | grep -q 'origin/main'; then
            echo "ERROR: Tag '$TAG' (commit $TAG_SHA) is not contained in origin/main. Aborting publish."
            exit 1
          fi

          echo "version=$TAG" >> "$GITHUB_OUTPUT"

      - name: Install tooling
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Install dependencies
        run: poetry install --with dev

      - name: Build package
        run: poetry build

      - name: Publish to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.POETRY_PYPI_TOKEN_PYPI }}
        run: |
          # configure poetry auth and publish
          poetry publish --no-interaction --build

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.validate_tag.outputs.version }}
          name: Release ${{ steps.validate_tag.outputs.version }}
          generate_release_notes: true
